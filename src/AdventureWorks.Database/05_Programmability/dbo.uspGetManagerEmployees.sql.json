{
  "definitionName": "uspGetManagerEmployees",
  "schemaName": "dbo",
  "definition": "CREATE PROCEDURE [dbo].[uspGetManagerEmployees]\n    @BusinessEntityID [int]\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Use recursive query to list out all Employees required for a particular Manager\n    WITH [EMP_cte]([BusinessEntityID], [OrganizationNode], [FirstName], [LastName], [RecursionLevel]) -- CTE name and columns\n    AS (\n        SELECT e.[BusinessEntityID], e.[OrganizationNode], p.[FirstName], p.[LastName], 0 -- Get the initial list of Employees for Manager n\n        FROM [HumanResources].[Employee] e \n            INNER JOIN [Person].[Person] p \n            ON p.[BusinessEntityID] = e.[BusinessEntityID]\n        WHERE e.[BusinessEntityID] = @BusinessEntityID\n        UNION ALL\n        SELECT e.[BusinessEntityID], e.[OrganizationNode], p.[FirstName], p.[LastName], [RecursionLevel] + 1 -- Join recursive member to anchor\n        FROM [HumanResources].[Employee] e \n            INNER JOIN [EMP_cte]\n            ON e.[OrganizationNode].GetAncestor(1) = [EMP_cte].[OrganizationNode]\n            INNER JOIN [Person].[Person] p \n            ON p.[BusinessEntityID] = e.[BusinessEntityID]\n        )\n    -- Join back to Employee to return the manager name \n    SELECT [EMP_cte].[RecursionLevel], [EMP_cte].[OrganizationNode].ToString() as [OrganizationNode], p.[FirstName] AS 'ManagerFirstName', p.[LastName] AS 'ManagerLastName',\n        [EMP_cte].[BusinessEntityID], [EMP_cte].[FirstName], [EMP_cte].[LastName] -- Outer select from the CTE\n    FROM [EMP_cte] \n        INNER JOIN [HumanResources].[Employee] e \n        ON [EMP_cte].[OrganizationNode].GetAncestor(1) = e.[OrganizationNode]\n            INNER JOIN [Person].[Person] p \n            ON p.[BusinessEntityID] = e.[BusinessEntityID]\n    ORDER BY [RecursionLevel], [EMP_cte].[OrganizationNode].ToString()\n    OPTION (MAXRECURSION 25) \nEND;",
  "xType": "P",
  "type": "PROCEDURE"
}